name: Publish NuGet Package

on:
  push:
    branches:
      - nuget

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Increment Version
        id: increment_version
        run: |
          # Read the current version from the .csproj file
          CURRENT_VERSION=$(grep -oP '(?<=<Version>).*?(?=</Version>)' src/HGO.ASPNetCore.FileManager/HGO.ASPNetCore.FileManager.csproj)

          # Split version into its components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment the patch version (or change this logic as needed)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          # Update the .csproj file with the new version
          sed -i "s|<Version>$CURRENT_VERSION</Version>|<Version>$NEW_VERSION</Version>|" src/HGO.ASPNetCore.FileManager/HGO.ASPNetCore.FileManager.csproj

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Check for existing tags
        id: check_tags
        run: |
          TAG_EXISTS=$(git tag --list "${{ env.NEW_VERSION }}" | wc -l)
          echo "TAG_EXISTS=$TAG_EXISTS" >> $GITHUB_ENV

      - name: Create new Git tag if it doesn't exist
        run: |
          if [ "${{ env.TAG_EXISTS }}" -eq 0 ]; then
            echo "Creating new tag ${{ env.NEW_VERSION }}"
            git tag "${{ env.NEW_VERSION }}"
            git push origin "${{ env.NEW_VERSION }}"
          else
            echo "Tag ${{ env.NEW_VERSION }} already exists. Skipping tag creation."
          fi

      - name: Commit version change
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add src/HGO.ASPNetCore.FileManager/HGO.ASPNetCore.FileManager.csproj
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push origin nuget

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Pack
        run: dotnet pack --configuration Release --output ./output

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./output/*.nupkg -s https://api.nuget.org/v3/index.json -k $NUGET_API_KEY
